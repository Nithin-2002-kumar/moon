Below is the complete documentation for the `MOON` assistant project, covering its purpose, features, installation, usage, GUI description, code structure, and troubleshooting. This documentation assumes the latest version of `moon.py` with the enhanced GUI and color detection features.

---

# MOON Assistant Documentation

## Overview
**MOON** (Multimodal Operational Observation Network) is an advanced AI assistant powered by xAI's Grok technology, designed to provide a wide range of functionalities including speech recognition, computer vision, natural language processing, and system automation. It features a futuristic GUI and is optimized for tasks like nighttime color detection and entity classification.

- **Version**: 1.0
- **Date**: April 10, 2025 (simulated current date)
- **Developed by**: xAI-inspired contributor

## Features
- **Speech Interaction**: Recognizes voice commands with a configurable wake word ("moon" by default) and responds via text-to-speech.
- **Computer Vision**: Detects objects, colors, faces, emotions, and genders using YOLO, OpenCV, and DeepFace.
- **Nighttime Optimization**: Enhanced color detection and entity classification for low-light conditions.
- **Natural Language Processing**: Parses commands and analyzes sentiment using Spacy and TextBlob.
- **System Automation**: Opens/closes applications, types text, takes screenshots, and navigates browsers.
- **External Integrations**: Weather updates, Wikipedia searches, Wolfram Alpha queries, and email sending.
- **Memory**: Retains conversation history and learned commands across sessions (toggleable).
- **GUI**: A sleek, dark-themed interface with real-time status, command log, control buttons, and detection results.

## Installation

### Prerequisites
- **Operating System**: Windows, macOS, or Linux
- **Python**: Version 3.8‚Äì3.11
- **Hardware**: Webcam (for vision tasks), microphone (for speech input), speakers (for output)
- **Internet**: Required for external APIs (weather, Wikipedia, etc.)

### Dependencies
Install the required Python packages using the provided `requirements.txt`:

```
opencv-python==4.10.0.84
numpy==1.26.4
face_recognition==1.3.0
deepface==0.0.93
pyttsx3==2.90
speechrecognition==3.10.4
pyautogui==0.9.54
psutil==6.0.0
pygame==2.6.0
spacy==3.7.6
textblob==0.18.0.post0
requests==2.32.3
wikipedia==1.4.0
wolframalpha==5.1.3
pillow==10.4.0
mediapipe==0.10.14
scikit-learn==1.5.1
```

### Steps
1. **Clone or Download**:
   - Save `moon.py` and `requirements.txt` in a project directory.

2. **Install Dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Install Spacy Model**:
   ```bash
   python -m spacy download en_core_web_sm
   ```

4. **Download YOLO Files**:
   - Obtain `yolov3.weights`, `yolov3.cfg`, and `coco.names` from the [YOLO website](https://pjreddie.com/darknet/yolo/).
   - Place them in the project directory.

5. **Optional Font**:
   - Install 'Orbitron' from [Google Fonts](https://fonts.google.com/specimen/Orbitron) for the GUI (falls back to default if unavailable).

6. **Configure APIs** (optional):
   - Edit `moon_config.json` (auto-generated on first run) with your API keys:
     - `weather_api_key`: OpenWeatherMap
     - `wolfram_api_key`: Wolfram Alpha
     - `openai_api_key`: OpenAI (not currently used)
     - `email_user` and `email_pass`: Gmail credentials (use an app-specific password).

## Usage

### Running MOON
1. Navigate to the project directory:
   ```bash
   cd /path/to/moon
   ```
2. Execute the script:
   ```bash
   python moon.py
   ```
3. The GUI will launch in fullscreen mode.

### Interacting with MOON
- **Voice Commands**: Say "MOON" followed by a command (e.g., "MOON, detect colors").
- **GUI Buttons**: Click "Listen," "Detect Colors," "Classify Entities," or "Shutdown."
- **Manual Listening**: Toggle the "Listen" button for continuous command input.

### Supported Commands
| Command                | Description                                   | Example                          |
|-----------------------|-----------------------------------------------|----------------------------------|
| "detect colors"       | Detects objects and their colors (night-optimized) | "MOON, detect colors"            |
| "classify entities"   | Classifies entities with colors and categories | "MOON, classify entities"        |
| "open [app]"          | Opens an application (notepad, browser, etc.) | "MOON, open notepad"             |
| "close [app]"         | Closes an application                         | "MOON, close notepad"            |
| "search [query]"      | Searches the web                              | "MOON, search Python"            |
| "set reminder"        | Sets a reminder                               | "MOON, set reminder call in 1 hour" |
| "tell time"           | Reports current time                          | "MOON, tell time"                |
| "tell date"           | Reports current date                          | "MOON, tell date"                |
| "take screenshot"     | Captures a screenshot                         | "MOON, take screenshot"          |
| "send email to [name]"| Sends an email                                | "MOON, send email to John hi"    |
| "check weather"       | Fetches weather data                          | "MOON, check weather in London"  |
| "who am i"            | Identifies the current user                   | "MOON, who am i"                 |
| "tell me a joke"      | Grok tells a joke                             | "MOON, tell me a joke"           |

- **Unknown Commands**: MOON offers to learn or pass to Grok for advanced processing.

### Exiting
- Click the "Shutdown" button or say "MOON, shutdown" (if added to learned commands).

## GUI Description
The GUI is designed for a futuristic, immersive experience:
- **Title**: "MOON - Powered by Grok" (top center, cyan text).
- **Status Panel**: Left side, shows:
  - Status (e.g., "Waiting for 'moon'").
  - User (e.g., "User: John").
  - System stats (e.g., "CPU 12.5% | Mem 45.3%").
- **Command Log**: Center, scrolled text for command/response history.
- **Control Panel**: Top-right, buttons:
  - "üé§ Listen" (toggles manual listening).
  - "üåà Detect Colors" (triggers color detection).
  - "üîç Classify Entities" (triggers entity classification).
  - "‚èπ Shutdown" (exits).
- **Results Panel**: Bottom-right, displays last 5 detection results.
- **HUD**: Animated cyan arcs orbiting the screen for visual flair.

## Code Structure
### Main Class: `MOON`
- **Initialization**: Loads config, sets up components (speech, vision, NLP), and initializes the GUI.
- **Methods**:
  - `init_ui()`: Builds the GUI layout.
  - `process_command()`: Classifies and executes commands.
  - `detect_colors()`: Detects objects and colors in real-time.
  - `classify_entities()`: Classifies entities with categories and colors.
  - `speak()`: Handles text-to-speech and logging.
  - `system_monitor()`: Updates system stats.
  - `get_grok_response()`: Simulates Grok's advanced responses.

### Key Files
- `moon.py`: Main script.
- `moon_config.json`: Configuration file (auto-generated).
- `moon_memory.json`: Memory storage (auto-generated).
- `yolov3.weights`, `yolov3.cfg`, `coco.names`: YOLO model files.

## Configuration
Edit `moon_config.json` to customize:
- `wake_word`: Default "moon".
- `hotword`: Trigger for commands.
- `speech_rate`: Speech speed (default 170).
- `voice`: Voice index (0 for male, 1 for female).
- `use_memory`: Enable/disable memory (default True).
- `known_faces`: Add user face encodings and preferences.

## Troubleshooting
| Issue                          | Solution                                                                 |
|--------------------------------|-------------------------------------------------------------------------|
| "Module not found"             | Run `pip install -r requirements.txt` again.                            |
| No audio output                | Check speakers and ensure `pyttsx3` is configured correctly.            |
| Webcam not working             | Verify camera connection and permissions.                               |
| "YOLO files missing"           | Download `yolov3.weights`, `yolov3.cfg`, `coco.names` to the directory. |
| Poor nighttime detection       | Adjust `COLOR_RANGES` in code or improve lighting/camera quality.       |
| GUI lag                        | Reduce HUD elements or animation speed (`self.root.after(200, ...)`)    |
| API errors                     | Verify API keys in `moon_config.json`.                                  |

## Limitations
- **Nighttime Accuracy**: Dependent on camera quality and lighting; very dark conditions may yield "unknown" colors.
- **Memory**: Simulated Grok responses lack real API integration.
- **Scalability**: GUI may not adapt perfectly to all screen resolutions (fullscreen focus).

## Future Enhancements
- Integrate real xAI Grok API.
- Add customizable GUI themes.
- Support more colors and categories.
- Enhance gesture controls with additional actions.
- Implement real-time video feed in the GUI.

## License
This project is for educational purposes and inspired by xAI. No official license is provided; use at your own risk.

---

This documentation provides a comprehensive guide to using and extending the `MOON` assistant. Let me know if you need further details or specific sections expanded!